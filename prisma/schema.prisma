generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  occupation    String?
  accountId     String?   @unique
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       User          @relation(fields: [ownerId], references: [id])
  pages       ProjectPage[]
  urls        ProjectUrl[]
  status      Status[]
}

model ProjectUrl {
  id        String  @id @default(cuid())
  url       String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectPage {
  id        String        @id @default(cuid())
  name      String
  path      String
  parentId  String?       @map("parentId")
  level     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projectId String
  statusId  String?
  parent    ProjectPage?  @relation("children", fields: [parentId], references: [id])
  children  ProjectPage[] @relation("children")
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status    Status?       @relation(fields: [statusId], references: [id])
}

model Status {
  id          String        @id @default(uuid())
  name        String
  projectId   String
  color       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectPage ProjectPage[]
  project     Project       @relation(fields: [projectId], references: [id])
}
